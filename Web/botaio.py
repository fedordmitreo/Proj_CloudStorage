import shutil
import os
from database import get_all_users
from emailf import send_email
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

token = "**"
chat_id = -1

storage = MemoryStorage()
bot = Bot(token=token)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("–ó–¥—Ä–∞—Å—å—Ç–µ")
    await message.answer("all - –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
                         "delete_files id - –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º id")


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ ---
class DeleteFiles(StatesGroup):
    waiting_for_confirm = State()     # –£–≤–µ—Ä–µ–Ω –ª–∏ –∞–¥–º–∏–Ω?
    waiting_for_notify = State()      # –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?

# --- –ö–æ–º–∞–Ω–¥–∞ /delete_files ---
@dp.message_handler(commands=['delete_files'])
async def delete_user_files(message: types.Message):
    args = message.get_args().strip()

    if not args:
        await message.answer("UsageId: /delete_files <user_id>")
        return

    try:
        target_user_id = int(args)
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    users = get_all_users()
    user_data = None
    for user in users:
        user_id, name, email, is_admin = user
        if user_id == target_user_id:
            user_data = {"id": user_id, "name": name, "email": email}
            break

    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await DeleteFiles.waiting_for_confirm.set()
    state: FSMContext = dp.current_state()
    await state.update_data(
        target_user_id=target_user_id,
        user_name=user_data["name"],
        user_email=user_data["email"]
    )

    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ {user_data['name']}\n"
        f"üìß {user_data['email']}?\n\n",
        parse_mode="HTML"
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@dp.message_handler(state=DeleteFiles.waiting_for_confirm)
async def process_confirm(message: types.Message, state: FSMContext):
    answer = message.text.strip().lower()
    data = await state.get_data()

    if answer in ("–¥–∞", "yes", "y", "–¥"):
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        user_upload = os.path.join('User_Files', str(data['target_user_id']))
        user_trash = os.path.join('Trash', str(data['target_user_id']))

        try:
            if os.path.exists(user_upload):
                shutil.rmtree(user_upload)
            if os.path.exists(user_trash):
                shutil.rmtree(user_trash)
            os.makedirs(user_upload, exist_ok=True)
            os.makedirs(user_trash, exist_ok=True)

            await message.answer("üóëÔ∏è –§–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            await DeleteFiles.waiting_for_notify.set()
            await message.answer(
                f"–•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ email: <code>{data['user_email']}</code>?",
                parse_mode="HTML"
            )
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            await state.finish()

    elif answer in ("–Ω–µ—Ç", "no", "n", "–Ω"):
        await message.answer("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ. –§–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–µ–Ω—ã.")
        await state.finish()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–∞</b> –∏–ª–∏ <b>–Ω–µ—Ç</b>.", parse_mode="HTML")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
@dp.message_handler(state=DeleteFiles.waiting_for_notify)
async def process_notify(message: types.Message, state: FSMContext):
    answer = message.text.strip().lower()
    data = await state.get_data()

    if answer in ("–¥–∞", "yes", "y", "–¥"):
        try:
            send_email(to=data['user_email'])
            await message.answer("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email.")
        except Exception as e:
            await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email: {e}")

    await message.answer("üëã –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@dp.message_handler(commands=['all'])
async def all_users(message: types.Message):
    try:
        users = get_all_users()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (id, name, email, is_admin)

        if not users:
            await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞)
        users.sort(key=lambda x: x[0])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        lines = ["üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ ID):", ""]
        for user in users:
            user_id, name, email, is_admin = user
            admin_status = "‚úÖ –ê–¥–º–∏–Ω" if is_admin else "üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            lines.append(
                f"<b>ID {user_id}</b>\n"
                f"üë§ <b>–ò–º—è:</b> {name}\n"
                f"üìß <b>Email:</b> {email}\n"
                f"üõ° <i>{admin_status}</i>\n"
            )

        response = "\n".join(lines)

        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(response) > 4000:
            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî —Ä–∞–∑–±–∏–≤–∞–µ–º
            await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —á–∞—Å—Ç—è–º–∏...")

            part = []
            for user in users:
                user_id, name, email, is_admin = user
                admin_status = "‚úÖ –ê–¥–º–∏–Ω" if is_admin else "üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                line = (
                    f"<b>ID {user_id}</b>\n"
                    f"üë§ <b>–ò–º—è:</b> {name}\n"
                    f"üìß <b>Email:</b> {email}\n"
                    f"üõ° <i>{admin_status}</i>\n"
                )
                if len("\n".join(part)) + len(line) > 3500:
                    await message.answer("\n".join(part), parse_mode="HTML")
                    part = [line]
                else:
                    part.append(line)
            if part:
                await message.answer("\n".join(part), parse_mode="HTML")
        else:
            await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        print(f"–û—à–∏–±–∫–∞ –≤ /all: {e}")



if __name__ == '__main__':
    executor.start_polling(dp)